#define FORWARD_COUNT   12
#define CLIENT_COUNT     1
#define MAX_PATHLEN 10

native do
    typedef struct {
        message_t** msg;
        u8          len;
        u8          gotcha;
    } srp_forward_t;
end

native @pure
    _getSRPHeader(),
    _SourceRouteId_fetch(),
    _SourceRoutePacket_getNextHop(),
    _SourceRouteSend_getPayload();

native @nohold
    _memcpy(),
    _receive(),          // client is supposed not to hold
    _packet_setRoute(),
    _packet_setContents(),
    _send_dequeue(),
    _SourceRoutePacket_setRoute();

input void       START;
input void       STOP;
input _packet_t* SENDDONE;
input _packet_t* RECEIVE;

/*
GLOBALS:

nesC: state(4), seqno, MsgPool, EntryPool, Queue
      msg, len, client, clientEntries, clientStatus

CÃ©u:  ......., seqno,  MsgPool, Fwds(2),   .....
      msg  len(2),  id,   Clts(2),       ............

state:
clientStatus:
Queue: try any
len: 2nd


*/

class Client with
do
    loop seqno do
        par/and do
            await 1min;
        with
            var _packet_t pkt;
            _packet_setRoute(&pkt, seqno);
            _packet_setContents(&pkt, seqno);

            loop do
                _send_enqueue(pkt.hops[pkt.hops_left], &pkt)
                    finalize with
                        _send_dequeue(&pkt);
                    end;

                var _packet_t* done = await SENDDONE;
                if done == &pkt then
                    break;
                end
            end
        end
    end
end

class Forwarder with
    var _packet_t* src;
do
    var _packet_t pkt;
    _memcpy(&pkt, src, src:len);
    loop do
        _send_enqueue(pkt.hops[pkt.hops_left], &pkt)
            finalize with
                _send_dequeue(&pkt);
            end;

        var _packet_t* done = await SENDDONE;
        if done == &pkt then
            break;
        end
    end
end

loop do
    await START;
    par/or do
        await STOP;
    with
        var  Client   [CLIENT_COUNT]  clients;
        pool Forwarder[FORWARD_COUNT] forwarders;

        var _packet_t* pkt;
        every pkt in RECEIVE do
            if pkt:hops_left == 0 then
                _receive(pkt);
            else
                pkt:hops_left = pkt:hops_left - 1;
                spawn Forwarder with
                    this.src := pkt;
                end;
            end
        end
    end
end
